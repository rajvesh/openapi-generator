/*
 * Generated by OpenAPI Generator, do not edit.
 * https://openapi-generator.tech
 */

#pragma once
#include <httplib.h>
#include <variant>
#include "models/User.h"

namespace api {

class User {
public:
    User() = default;
    virtual ~User() = default;
    void registerRoutes(httplib::Server& svr);

    /**
     * @brief handlePostForUser is a Pure virtual handler function for API endpoint.
     *
     * This function must be implemented by derived classes to handle the corresponding API request.
     * @param "models::User" The request model containing the input data for the API endpoint.
     */
    virtual void handlePostForUser(
       const models::User& request) = 0;


    /**
     * @brief handlePostForUserCreateWithArray is a Pure virtual handler function for API endpoint.
     *
     * This function must be implemented by derived classes to handle the corresponding API request.
     * @param "models::User" The request model containing the input data for the API endpoint.
     */
    virtual void handlePostForUserCreateWithArray(
       const models::User& request) = 0;


    /**
     * @brief handlePostForUserCreateWithList is a Pure virtual handler function for API endpoint.
     *
     * This function must be implemented by derived classes to handle the corresponding API request.
     * @param "models::User" The request model containing the input data for the API endpoint.
     */
    virtual void handlePostForUserCreateWithList(
       const models::User& request) = 0;


    /**
     * @brief handleDeleteForUser{username} is a Pure virtual handler function for API endpoint.
     *
     * This function must be implemented by derived classes to handle the corresponding API request.
     */
    virtual void handleDeleteForUser{username}()=0;


    /**
     * @brief Response type for handleGetForUser{username}.
     */
    using User{username}Response = std::variant<
                        models::User>;//success type

    /**
     * @brief Handler function for processing API requests.
     *
     * handleGetForUser{username} is a pure virtual function that must be implemented by derived classes to handle.
     * @return User{username}Response The response type returned by the handler.
     */
    virtual User{username}Response handleGetForUser{username}()=0;


    /**
     * @brief Response type for handleGetForUserLogin.
     */
    using UserLoginResponse = std::variant<
                        std::string>;//success type

    /**
     * @brief Handler function for processing API requests.
     *
     * handleGetForUserLogin is a pure virtual function that must be implemented by derived classes to handle.
     * @return UserLoginResponse The response type returned by the handler.
     */
    virtual UserLoginResponse handleGetForUserLogin()=0;



    /**
     * @brief handleGetForUserLogout is a Pure virtual handler function for API endpoint.
     *
     * This function must be implemented by derived classes to handle the corresponding API request.
     */
    virtual void handleGetForUserLogout()=0;



    /**
     * @brief handlePutForUser{username} is a Pure virtual handler function for API endpoint.
     *
     * This function must be implemented by derived classes to handle the corresponding API request.
     * @param "models::User" The request model containing the input data for the API endpoint.
     */
    virtual void handlePutForUser{username}(
       const models::User& request) = 0;

};

} // namespace api
