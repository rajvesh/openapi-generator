/*
 * Generated by OpenAPI Generator, do not edit.
 * https://openapi-generator.tech
 */

#pragma once
#include <httplib.h>
#include <variant>
#include "models/Pet.h"
#include "models/ApiResponse.h"

namespace api {

class Pet {
public:
    Pet() = default;
    virtual ~Pet() = default;
    void registerRoutes(httplib::Server& svr);
    /**
     * @brief Response type for handlePostForPet.
     */
    using PetResponse = std::variant<
                        models::Pet>;//success type

    /**
     * @brief Handler function for processing API requests.
     *
     * handlePostForPet is a pure virtual function that must be implemented by derived classes to handle.
     * @param request model containing the input data for the API endpoint.
     * @return PetResponse The response type returned by the handler.
     */
    virtual PetResponse handlePostForPet(
                         const models::Pet& request) = 0;


    /**
     * @brief handleDeleteForPet{petId} is a Pure virtual handler function for API endpoint.
     *
     * This function must be implemented by derived classes to handle the corresponding API request.
     */
    virtual void handleDeleteForPet{petId}()=0;


    /**
     * @brief Response type for handleGetForPetFindByStatus.
     */
    using PetFindByStatusResponse = std::variant<
                        models::Pet>;//success type

    /**
     * @brief Handler function for processing API requests.
     *
     * handleGetForPetFindByStatus is a pure virtual function that must be implemented by derived classes to handle.
     * @return PetFindByStatusResponse The response type returned by the handler.
     */
    virtual PetFindByStatusResponse handleGetForPetFindByStatus()=0;


    /**
     * @brief Response type for handleGetForPetFindByTags.
     */
    using PetFindByTagsResponse = std::variant<
                        models::Pet>;//success type

    /**
     * @brief Handler function for processing API requests.
     *
     * handleGetForPetFindByTags is a pure virtual function that must be implemented by derived classes to handle.
     * @return PetFindByTagsResponse The response type returned by the handler.
     */
    virtual PetFindByTagsResponse handleGetForPetFindByTags()=0;


    /**
     * @brief Response type for handleGetForPet{petId}.
     */
    using Pet{petId}Response = std::variant<
                        models::Pet>;//success type

    /**
     * @brief Handler function for processing API requests.
     *
     * handleGetForPet{petId} is a pure virtual function that must be implemented by derived classes to handle.
     * @return Pet{petId}Response The response type returned by the handler.
     */
    virtual Pet{petId}Response handleGetForPet{petId}()=0;


    /**
     * @brief Response type for handlePutForPet.
     */
    using PetResponse = std::variant<
                        models::Pet>;//success type

    /**
     * @brief Handler function for processing API requests.
     *
     * handlePutForPet is a pure virtual function that must be implemented by derived classes to handle.
     * @param request model containing the input data for the API endpoint.
     * @return PetResponse The response type returned by the handler.
     */
    virtual PetResponse handlePutForPet(
                         const models::Pet& request) = 0;


    /**
     * @brief handlePostForPet{petId} is a Pure virtual handler function for API endpoint.
     *
     * This function must be implemented by derived classes to handle the corresponding API request.
     */
    virtual void handlePostForPet{petId}()=0;


    /**
     * @brief Response type for handlePostForPet{petId}UploadImage.
     */
    using Pet{petId}UploadImageResponse = std::variant<
                        models::ApiResponse>;//success type

    /**
     * @brief Handler function for processing API requests.
     *
     * handlePostForPet{petId}UploadImage is a pure virtual function that must be implemented by derived classes to handle.
     * @return Pet{petId}UploadImageResponse The response type returned by the handler.
     */
    virtual Pet{petId}UploadImageResponse handlePostForPet{petId}UploadImage()=0;


};

} // namespace api
