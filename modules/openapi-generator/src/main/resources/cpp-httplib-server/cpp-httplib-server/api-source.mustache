{{>License}}

{{{apiHeaderFileName}}}

namespace {{apiNamespace}} {

void {{apiClassnameInPascalCase}}::registerRoutes(httplib::Server& svr) {
    {{#operations}}
    {{#operation}}
    {{#vendorExtensions}}
    svr.{{httpMethod}}("{{path}}", [this]([[maybe_unused]]const httplib::Request& req, httplib::Response& res) {
        {{#hasAnyResponseSchema}}
        try {
                {{#requestModel}}
                //request has schema in json, Hence parsing the request body to the model
                {{requestModel}} request = {{requestModel}}::fromJson(nlohmann::json::parse(req.body));
                auto result = {{handlerFunctionName}}(request);
                {{/requestModel}}
                {{^requestModel}}
                auto result = {{handlerFunctionName}}();
                {{/requestModel}}

                std::visit([&](const auto& value) {
                            using T = std::decay_t<decltype(value)>;
                            if constexpr (std::is_same_v<T, {{successType}}>) {
                                res.status = 200;
                                res.set_content(value.toJson(value).dump(), "application/json");
                            }
                            {{#statusCodeToTypes}}
                            else if constexpr (std::is_same_v<T, {{typeName}}>) {
                                res.status = {{statusCode}};
                                res.set_content(value.toJson(value).dump(), "application/json");
                            }
                            {{/statusCodeToTypes}}
                        },
                        static_cast<const decltype(result)&>(result));
        } catch (const nlohmann::json::parse_error& e)
        {
            res.status = 400;
            nlohmann::json errorJson = {
                {"message", "Invalid JSON: " + std::string(e.what())}
            };
            res.set_content(errorJson.dump(), "application/json");
        } catch (const std::exception& e)
        {
            res.status = 500;
            nlohmann::json errorJson = {
                {"message", "Internal Server Error: " + std::string(e.what())}
            };
            res.set_content(errorJson.dump(), "application/json");
        }
        {{/hasAnyResponseSchema}}
        {{^hasAnyResponseSchema}}
                {{#requestModel}}
                //request has schema in json, Hence parsing the request body to the model
                {{requestModel}} request = {{requestModel}}::fromJson(nlohmann::json::parse(req.body));
                {{handlerFunctionName}}(request);
                {{/requestModel}}
                {{^requestModel}}
                {{handlerFunctionName}}();
                {{/requestModel}}
        {{/hasAnyResponseSchema}}
    });
    {{/vendorExtensions}}

    {{/operation}}
    {{/operations}}
}

} // namespace {{apiNamespace}}