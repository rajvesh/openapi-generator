# {{projectName}} - C++ Server

## Overview

This server was generated using the [OpenAPI Generator](https://openapi-generator.tech) project.
It uses the [cpp-httplib](https://github.com/yhirose/cpp-httplib) library to implement a lightweight HTTP server
with JSON request/response handling via [nlohmann/json](https://github.com/nlohmann/json).

## Requirements

- C++17 compatible compiler
- [cpp-httplib](https://github.com/yhirose/cpp-httplib) library
- [nlohmann/json](https://github.com/nlohmann/json) library
- CMake (3.14 or higher)

## Project Structure

```
├── CMakeLists.txt          # Project build configuration
├── README.md               # This file
├── model/                  # Generated model classes
└── api/                    # Generated API handler classes
```

## Building the Project

```bash
mkdir build
cd build
cmake ..
make
```

## Working with Models

### Model Classes

{{#models}}
{{#model}}
#### {{vendorExtensions.modelNamespace}}::{{vendorExtensions.modelClassName}}

```cpp
// Create a model
auto model = {{vendorExtensions.modelNamespace}}::{{vendorExtensions.modelClassName}}();
{{#vars}}
model.{{vendorExtensions.setter}}(/* value */);  // Set {{baseName}}
{{/vars}}

// Serialize to JSON
nlohmann::json json = {{vendorExtensions.modelNamespace}}::{{vendorExtensions.modelClassName}}::toJson(model);
std::string jsonString = json.dump();

// Deserialize from JSON
auto parsedModel = {{vendorExtensions.modelNamespace}}::{{vendorExtensions.modelClassName}}::fromJson(nlohmann::json::parse(jsonString));
```
{{/model}}
{{/models}}

## Implementing API Handlers

### API Classes

{{#apiInfo}}
{{#apis}}
{{#operations}}
#### {{classname}}

To implement this API, create a class that inherits from the generated base class:

```cpp
class {{classname}}Impl : public {{apiNamespace}}::{{classname}} {
public:
    {{#operation}}
    {{#vendorExtensions}}
    {{handlerFunctionResponse}} {{handlerFunctionName}}({{#requestModel}}const {{requestModel}}& request{{/requestModel}}) override {
        // Implement your logic here
        {{#requestModel}}
        // Access request data with request.getters
        {{/requestModel}}
        {{^requestModel}}
        // Access request parameters with req.get_param_value("param_name")
        {{/requestModel}}

        // For successful response:
        return {{successType}}();

        // For error responses:
        {{#statusCodeToTypes}}
        // return {{typeName}}();  // Returns a {{statusCode}} status code
        {{/statusCodeToTypes}}
    }

    {{/vendorExtensions}}
    {{/operation}}
};
```
{{/operations}}
{{/apis}}
{{/apiInfo}}

## Running the Server

```cpp
#include <httplib.h>
#include "api/YourApiImpl.h"

int main() {
    // Create server
    auto svr = std::make_unique<httplib::Server>();

    // Create API implementation
    auto <your_api>Impl = std::make_shared<YourApiImpl>();

    // Register routes
    <your_api>Impl->RegisterRoutes(std::move(svr));

    // Start server on port 8080
    svr->listen("localhost", 8080);

    return 0;
}
```

## Error Handling

Each API endpoint returns a variant type that can hold either a success response or one of several error responses.
The server automatically handles this variant and returns the appropriate HTTP status code.

## Working with Optional Fields

Optional parameters and model fields are represented using `std::optional`:

```cpp
if (model.getOptionalField()) {
    // Field is present
    auto value = *model.getOptionalField();
} else {
    // Field is not present
}
```

## Additional Resources

- [cpp-httplib Documentation](https://github.com/yhirose/cpp-httplib)
- [nlohmann/json Documentation](https://github.com/nlohmann/json)
- [OpenAPI Generator Documentation](https://openapi-generator.tech/docs/generators/)
```cpp
if (model.getOptionalField()) {
    // Field is present
    auto value = *model.getOptionalField();
} else {
    // Field is not present
}
```

## Additional Resources

- [cpp-httplib Documentation](https://github.com/yhirose/cpp-httplib)
- [nlohmann/json Documentation](https://github.com/nlohmann/json)
- [OpenAPI Generator Documentation](https://openapi-generator.tech/docs/generators/)
